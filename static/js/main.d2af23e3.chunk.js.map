{"version":3,"sources":["components/User.js","components/Comment.js","components/CommentList.js","components/Post.js","components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["User","react_default","a","createElement","Fragment","this","props","user","name","href","concat","email","React","Component","Comment","className","comment","body","CommentList","comments","map","c","components_Comment","key","id","Post","item","title","components_User","components_CommentList","PostList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","loaded","requested","postList","postFiltred","input","loadAllData","bind","assertThisInitialized","findPhrase","url","fetch","then","result","json","data","_this2","setState","Promise","all","getData","_ref","_ref2","slicedToArray","posts","users","post","objectSpread","find","u","userId","filter","postId","event","value","target","toLowerCase","elem","includes","type","onInput","components_Post","onClick","App","components_PostList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2af23e3.chunk.js","sourcesContent":["import React from 'react';\n\nclass User extends React.Component {\n  render() {\n    return (\n      <>\n        <h3>{this.props.user.name}</h3>\n        <a href={`mailto: ${this.props.user.email}`}>{this.props.user.email}</a>\n      </>\n    )\n  }\n}\n\nexport default User;\n","import React from 'react';\nimport '../css/Comment.css';\n\nclass Comment extends React.Component {\n  render() {\n    return (\n      <div className='comment'>\n        <h4>{this.props.comment.name}</h4>\n        <p>{this.props.comment.body}</p>\n        <a href={`mailto: ${this.props.comment.email}`}>{this.props.comment.email}</a>\n      </div>\n    )\n  }\n}\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment';\nimport '../css/Comments.css';\n\nclass CommentList extends React.Component {\n  render() {\n    return (\n      <div className='comments'>\n        {this.props.comments.map((c) => <Comment comment={c} key={c.id} />)}\n      </div>\n    )\n  }\n}\n\nexport default CommentList;\n","import React from 'react';\nimport User from './User';\nimport '../css/Post.css'\nimport CommentList from './CommentList';\n\nclass Post extends React.Component {\n  render() {\n    return (\n      <section className='post'>\n        <h2>{this.props.item.title}</h2>\n        <p>{this.props.item.body}</p>\n        <User user={this.props.item.user} />\n        <CommentList comments={this.props.item.comments} />\n      </section>\n    )\n  }\n}\n\nexport default Post;","import React from 'react';\nimport Post from './Post';\n\nclass PostList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      requested: false,\n      postList: [],\n      postFiltred: null,\n      input: ''\n    }\n    this.loadAllData = this.loadAllData.bind(this);\n    this.findPhrase = this.findPhrase.bind(this);\n  }\n\n  getData(url) {\n    return fetch(url).then(result => result.json()).then(data => data);\n  }\n\n  loadAllData() {\n    this.setState({\n      requested: true\n    });\n\n    Promise.all([this.getData('https://jsonplaceholder.typicode.com/posts'),\n    this.getData('https://jsonplaceholder.typicode.com/users'),\n    this.getData('https://jsonplaceholder.typicode.com/comments')])\n      .then(([posts, users, comments]) => this.setState({\n        loaded: true, postList: posts.map((post) => ({\n          ...post, user: users.find((u) => u.id === post.userId),\n          comments: comments.filter((c) => c.postId === post.id)\n        }))\n      }))\n  }\n\n  findPhrase(event) {\n    const value = event.target.value.toLowerCase();\n    this.setState({input: value, postFiltred: this.state.postList.filter((elem) => \n      elem.title.includes(value) || elem.body.includes(value))\n    });  \n  }\n\n  render() {\n    if (!this.state.requested) {\n      return <button onClick={this.loadAllData}>Load Posts</button>\n    } else if (this.state.loaded) {\n      return (\n\n        <section className=\"posts\">\n          <input className='findPhrase' type='text' onInput={this.findPhrase} /> \n          {this.state.input \n            ?this.state.postFiltred.map((elem) => <Post item={elem} key={elem.id}/>)\n            :this.state.postList.map((elem) => <Post item={elem} key={elem.id}/>)  \n            }\n        </section>\n      )\n    }\n    return (\n      <button>Loading...</button>\n    )\n  }\n}\n\nexport default PostList;\n","import React from 'react';\nimport PostList from './components/PostList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PostList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}